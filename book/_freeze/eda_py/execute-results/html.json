{
  "hash": "fd036f88693046de73b1638afa83403b",
  "result": {
    "markdown": "# Exploratory Data Analysis {#sec-eda}\n\n::: {#setup .cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Setup Code\"}\n# import packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom skimpy import skim\n\n# data path\npath = '../data/'\nfile_name = 'heart_disease.csv'\n\n# import data\ndf = pd.read_csv(f\"{path}{file_name}\")\n\n# get categorical columns\ncat_cols = ['sex', 'fasting_bs', 'resting_ecg', 'angina', 'heart_disease']\nfor col in cat_cols:\n    df[col] = df[col].astype('category')\n\n# set plot style\nsns.set_style('whitegrid')\n\n# set plot colour palette\ncolours = ['#217CA3', '#FFC933', '#C4274C']\nsns.set_palette(sns.color_palette(colours))\n```\n:::\n\n\nExploratory data analysis (EDA) is the process of inspecting, visualising, and summarising a dataset. It is the first step in any data science project, and the importance of EDA can often be overlooked. Without exploring the data, it is difficult to know how to construct a piece of analysis or a model, and it is difficult to know if the data is suitable for the task at hand. As a critical step in the data science workflow, it is important to spend time on EDA and to be thorough and methodical in the process. While EDA is often the most time-consuming step in an analysis, taking the time to explore the data can save time in the long run.\n\nEDA is an iterative process. In this tutorial, we will use the `pandas` and `seaborn` packages to explore a dataset containing information about heart disease. We will start by inspecting the data itself, to get a sense of the structure and the components of the dataset, and to identify any data quality issues (such as missing values). We will then compute summary statistics to get a better understanding of the distribution and central tendency of the variables that are relevant to the analysis. Finally, we will use data visualisations to explore specific variables in more detail, and to identify any interesting relationships between variables.\n\n## Inspecting the Data\n\nThe first step when doing EDA is to inspect the data itself and get an idea of the structure of the dataset, the variable types, and the typical values of each variable. This gives a better understanding of exactly what data is being used and informs decisions both about the next steps in the exploratory process and any modelling choices.\n\nWe can use the `head()` and `info()` functions to get a sense of the structure of the data. The `head()` function returns the first five rows of the data, and the `info()` method returns a summary of the data, including the number of rows, the number of columns, the column names, and the data type of each column. The `info()` method is particularly useful for identifying missing values, as it returns the number of non-null values in each column. If the number of non-null values is less than the number of rows, then there are missing values in the column.\n\nIn addition to these two methods, we can also use the `nunique()` method to count the number of unique values in each column, which helps identify categorical variables, and we can use the `unique()` method to get a list of the unique values in a column.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {#df-head .cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>resting_bp</th>\n      <th>cholesterol</th>\n      <th>fasting_bs</th>\n      <th>resting_ecg</th>\n      <th>max_hr</th>\n      <th>angina</th>\n      <th>heart_peak_reading</th>\n      <th>heart_disease</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>40</td>\n      <td>M</td>\n      <td>140</td>\n      <td>289</td>\n      <td>0</td>\n      <td>Normal</td>\n      <td>172</td>\n      <td>N</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>49</td>\n      <td>F</td>\n      <td>160</td>\n      <td>180</td>\n      <td>0</td>\n      <td>Normal</td>\n      <td>156</td>\n      <td>N</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>37</td>\n      <td>M</td>\n      <td>130</td>\n      <td>283</td>\n      <td>0</td>\n      <td>ST</td>\n      <td>98</td>\n      <td>N</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>48</td>\n      <td>F</td>\n      <td>138</td>\n      <td>214</td>\n      <td>0</td>\n      <td>Normal</td>\n      <td>108</td>\n      <td>Y</td>\n      <td>1.5</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>54</td>\n      <td>M</td>\n      <td>150</td>\n      <td>195</td>\n      <td>0</td>\n      <td>Normal</td>\n      <td>122</td>\n      <td>N</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#df-info .cell execution_count=4}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 918 entries, 0 to 917\nData columns (total 10 columns):\n #   Column              Non-Null Count  Dtype   \n---  ------              --------------  -----   \n 0   age                 918 non-null    int64   \n 1   sex                 918 non-null    category\n 2   resting_bp          918 non-null    int64   \n 3   cholesterol         918 non-null    int64   \n 4   fasting_bs          918 non-null    category\n 5   resting_ecg         918 non-null    category\n 6   max_hr              918 non-null    int64   \n 7   angina              918 non-null    category\n 8   heart_peak_reading  918 non-null    float64 \n 9   heart_disease       918 non-null    category\ndtypes: category(5), float64(1), int64(4)\nmemory usage: 41.1 KB\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# count unique values in each column\ndf.nunique()\n```\n\n::: {#count-unique .cell-output .cell-output-display execution_count=4}\n```\nage                    50\nsex                     2\nresting_bp             67\ncholesterol           222\nfasting_bs              2\nresting_ecg             3\nmax_hr                119\nangina                  2\nheart_peak_reading     53\nheart_disease           2\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# unique values of the outcome variable\ndf.heart_disease.unique()\n```\n\n::: {#heart-disease-unique .cell-output .cell-output-display execution_count=5}\n```\n[0, 1]\nCategories (2, int64): [0, 1]\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# unique values of a continuous explanatory variable\ndf.cholesterol.unique()\n```\n\n::: {#cholesterol-unique .cell-output .cell-output-display execution_count=6}\n```\narray([289, 180, 283, 214, 195, 339, 237, 208, 207, 284, 211, 164, 204,\n       234, 273, 196, 201, 248, 267, 223, 184, 288, 215, 209, 260, 468,\n       188, 518, 167, 224, 172, 186, 254, 306, 250, 177, 227, 230, 294,\n       264, 259, 175, 318, 216, 340, 233, 205, 245, 194, 270, 213, 365,\n       342, 253, 277, 202, 297, 225, 246, 412, 265, 182, 218, 268, 163,\n       529, 100, 206, 238, 139, 263, 291, 229, 307, 210, 329, 147,  85,\n       269, 275, 179, 392, 466, 129, 241, 255, 276, 282, 338, 160, 156,\n       272, 240, 393, 161, 228, 292, 388, 166, 247, 331, 341, 243, 279,\n       198, 249, 168, 603, 159, 190, 185, 290, 212, 231, 222, 235, 320,\n       187, 266, 287, 404, 312, 251, 328, 285, 280, 192, 193, 308, 219,\n       257, 132, 226, 217, 303, 298, 256, 117, 295, 173, 315, 281, 309,\n       200, 336, 355, 326, 171, 491, 271, 274, 394, 221, 126, 305, 220,\n       242, 347, 344, 358, 169, 181,   0, 236, 203, 153, 316, 311, 252,\n       458, 384, 258, 349, 142, 197, 113, 261, 310, 232, 110, 123, 170,\n       369, 152, 244, 165, 337, 300, 333, 385, 322, 564, 239, 293, 407,\n       149, 199, 417, 178, 319, 354, 330, 302, 313, 141, 327, 304, 286,\n       360, 262, 325, 299, 409, 174, 183, 321, 353, 335, 278, 157, 176,\n       131], dtype=int64)\n```\n:::\n:::\n\n\n## Summary Statistics\n\nSummary statistics are a quick and easy way to get a sense of the distribution and central tendency of the variables in the dataset. We can use the `describe()` method to get a quick overview of every column in the dataset, including the row count, the mean and standard deviation, the minimum and maximum value, and quartiles of each variable.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# summary of the data\ndf.describe()\n```\n\n::: {#df-describe .cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>resting_bp</th>\n      <th>cholesterol</th>\n      <th>max_hr</th>\n      <th>heart_peak_reading</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>918.000000</td>\n      <td>918.000000</td>\n      <td>918.000000</td>\n      <td>918.000000</td>\n      <td>918.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>53.510893</td>\n      <td>132.396514</td>\n      <td>198.799564</td>\n      <td>136.809368</td>\n      <td>0.887364</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>9.432617</td>\n      <td>18.514154</td>\n      <td>109.384145</td>\n      <td>25.460334</td>\n      <td>1.066570</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>60.000000</td>\n      <td>-2.600000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>47.000000</td>\n      <td>120.000000</td>\n      <td>173.250000</td>\n      <td>120.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>54.000000</td>\n      <td>130.000000</td>\n      <td>223.000000</td>\n      <td>138.000000</td>\n      <td>0.600000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>60.000000</td>\n      <td>140.000000</td>\n      <td>267.000000</td>\n      <td>156.000000</td>\n      <td>1.500000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>77.000000</td>\n      <td>200.000000</td>\n      <td>603.000000</td>\n      <td>202.000000</td>\n      <td>6.200000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWhile the `describe()` function is pretty effective, the `skimpy` package can provide a more detailed summary of the data, using the `skim()` function. If you are looking for a single function to capture the entire process of inspecting the data and computing summary statistics, `skim()` is the function for the job, giving you a wealth of information about the dataset as a whole and each variable in the data.\n\nAnother package that provides a similar function is the [`ydata-profiling`](https://github.com/ydataai/ydata-profiling) package, which can be used to generate a report containing a summary of the data, including the data types, missing values, and summary statistics. The `ydata-profiling` package is particularly useful for generating a report that can be shared with others, as it can be exported as an HTML file, however it's a bit more resource-intensive than `skimpy`, so we will stick with `skimpy` for this tutorial.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# more detailed summary of the data\nskim(df)\n```\n\n::: {#df-skim .cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">╭──────────────────────────────────────────────── skimpy summary ─────────────────────────────────────────────────╮\n│ <span style=\"font-style: italic\">         Data Summary         </span> <span style=\"font-style: italic\">      Data Types       </span> <span style=\"font-style: italic\">       Categories        </span>                                │\n│ ┏━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┓ ┏━━━━━━━━━━━━━┳━━━━━━━┓ ┏━━━━━━━━━━━━━━━━━━━━━━━┓                                │\n│ ┃<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\"> dataframe         </span>┃<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\"> Values </span>┃ ┃<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\"> Column Type </span>┃<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\"> Count </span>┃ ┃<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\"> Categorical Variables </span>┃                                │\n│ ┡━━━━━━━━━━━━━━━━━━━╇━━━━━━━━┩ ┡━━━━━━━━━━━━━╇━━━━━━━┩ ┡━━━━━━━━━━━━━━━━━━━━━━━┩                                │\n│ │ Number of rows    │ 918    │ │ category    │ 5     │ │ sex                   │                                │\n│ │ Number of columns │ 10     │ │ int32       │ 4     │ │ fasting_bs            │                                │\n│ └───────────────────┴────────┘ │ float64     │ 1     │ │ resting_ecg           │                                │\n│                                └─────────────┴───────┘ │ angina                │                                │\n│                                                        │ heart_disease         │                                │\n│                                                        └───────────────────────┘                                │\n│ <span style=\"font-style: italic\">                                                    number                                                    </span>  │\n│ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━┳━━━━━━━━━┳━━━━━━━━━┳━━━━━━━┳━━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━━┳━━━━━━━━━━┓  │\n│ ┃<span style=\"font-weight: bold\"> column_name                </span>┃<span style=\"font-weight: bold\"> NA   </span>┃<span style=\"font-weight: bold\"> NA %    </span>┃<span style=\"font-weight: bold\"> mean    </span>┃<span style=\"font-weight: bold\"> sd    </span>┃<span style=\"font-weight: bold\"> p0     </span>┃<span style=\"font-weight: bold\"> p25   </span>┃<span style=\"font-weight: bold\"> p75   </span>┃<span style=\"font-weight: bold\"> p100   </span>┃<span style=\"font-weight: bold\"> hist     </span>┃  │\n│ ┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━╇━━━━━━━━━╇━━━━━━━━━╇━━━━━━━╇━━━━━━━━╇━━━━━━━╇━━━━━━━╇━━━━━━━━╇━━━━━━━━━━┩  │\n│ │ <span style=\"color: #af87ff; text-decoration-color: #af87ff\">age                       </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">   0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">      0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">     54</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">  9.4</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">    28</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">   47</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">   60</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">    77</span> │ <span style=\"color: #008000; text-decoration-color: #008000\"> ▁▄▅█▅▁ </span> │  │\n│ │ <span style=\"color: #af87ff; text-decoration-color: #af87ff\">resting_bp                </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">   0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">      0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">    130</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">   19</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">     0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">  120</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">  140</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">   200</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">    █▆▁ </span> │  │\n│ │ <span style=\"color: #af87ff; text-decoration-color: #af87ff\">cholesterol               </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">   0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">      0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">    200</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">  110</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">     0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">  170</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">  270</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">   600</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">  ▃▂█▁  </span> │  │\n│ │ <span style=\"color: #af87ff; text-decoration-color: #af87ff\">max_hr                    </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">   0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">      0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">    140</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">   25</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">    60</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">  120</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">  160</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">   200</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">  ▃██▆▁ </span> │  │\n│ │ <span style=\"color: #af87ff; text-decoration-color: #af87ff\">heart_peak_reading        </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">   0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">      0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">   0.89</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">  1.1</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">  -2.6</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">    0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">  1.5</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">   6.2</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">   █▆▃  </span> │  │\n│ └────────────────────────────┴──────┴─────────┴─────────┴───────┴────────┴───────┴───────┴────────┴──────────┘  │\n│ <span style=\"font-style: italic\">                                                   category                                                   </span>  │\n│ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓  │\n│ ┃<span style=\"font-weight: bold\"> column_name                          </span>┃<span style=\"font-weight: bold\"> NA       </span>┃<span style=\"font-weight: bold\"> NA %          </span>┃<span style=\"font-weight: bold\"> ordered              </span>┃<span style=\"font-weight: bold\"> unique            </span>┃  │\n│ ┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩  │\n│ │ <span style=\"color: #af87ff; text-decoration-color: #af87ff\">sex                                 </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">       0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">            0</span> │ <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">False               </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">                2</span> │  │\n│ │ <span style=\"color: #af87ff; text-decoration-color: #af87ff\">fasting_bs                          </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">       0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">            0</span> │ <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">False               </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">                2</span> │  │\n│ │ <span style=\"color: #af87ff; text-decoration-color: #af87ff\">resting_ecg                         </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">       0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">            0</span> │ <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">False               </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">                3</span> │  │\n│ │ <span style=\"color: #af87ff; text-decoration-color: #af87ff\">angina                              </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">       0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">            0</span> │ <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">False               </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">                2</span> │  │\n│ │ <span style=\"color: #af87ff; text-decoration-color: #af87ff\">heart_disease                       </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">       0</span> │ <span style=\"color: #008080; text-decoration-color: #008080\">            0</span> │ <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">False               </span> │ <span style=\"color: #008080; text-decoration-color: #008080\">                2</span> │  │\n│ └──────────────────────────────────────┴──────────┴───────────────┴──────────────────────┴───────────────────┘  │\n╰────────────────────────────────────────────────────── End ──────────────────────────────────────────────────────╯\n</pre>\n```\n:::\n:::\n\n\nIf we want to examine a particular variable, the functions `mean()`, `median()`, `quantile()`, `min()`, and `max()` will return the same information as the `describe()` function. We can also get a sense of dispersion by computing the standard deviation or variance of a variable. The `std()` function returns the standard deviation of a variable, and the `var()` function returns the variance.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# mean & median age\ndf.age.mean(), df.age.median()\n```\n\n::: {#avg-age .cell-output .cell-output-display execution_count=9}\n```\n(53.510893246187365, 54.0)\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# min and max age\ndf.age.min(), df.age.max()\n```\n\n::: {#min-max-age .cell-output .cell-output-display execution_count=10}\n```\n(28, 77)\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# dispersion of age\ndf.age.std(), df.age.var()\n```\n\n::: {#dispersion-age .cell-output .cell-output-display execution_count=11}\n```\n(9.43261650673201, 88.9742541630732)\n```\n:::\n:::\n\n\nFinally, we can use the `value_counts()` function to get a count of the number of observations in each category of a discrete variable.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# heart disease count\ndf['heart_disease'].value_counts()\n```\n\n::: {#heart-disease-count .cell-output .cell-output-display execution_count=12}\n```\nheart_disease\n1    508\n0    410\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# resting ecg count\ndf['resting_ecg'].value_counts()\n```\n\n::: {#resting-ecg-count .cell-output .cell-output-display execution_count=13}\n```\nresting_ecg\nNormal    552\nLVH       188\nST        178\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# angina\ndf['angina'].value_counts()\n```\n\n::: {#angina-count .cell-output .cell-output-display execution_count=14}\n```\nangina\nN    547\nY    371\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# cholesterol\ndf['cholesterol'].value_counts()\n```\n\n::: {#cholesterol-count .cell-output .cell-output-display execution_count=15}\n```\ncholesterol\n0      172\n254     11\n223     10\n220     10\n230      9\n      ... \n392      1\n316      1\n153      1\n466      1\n131      1\nName: count, Length: 222, dtype: int64\n```\n:::\n:::\n\n\nWe can also use the `groupby()` method to get the counts of each category in a categorical variable, grouped by another categorical variable.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndf.groupby(['resting_ecg'])['heart_disease'].value_counts()\n```\n\n::: {#heart-disease-by-resting-ecg-count .cell-output .cell-output-display execution_count=16}\n```\nresting_ecg  heart_disease\nLVH          1                106\n             0                 82\nNormal       1                285\n             0                267\nST           1                117\n             0                 61\nName: count, dtype: int64\n```\n:::\n:::\n\n\nIn addition to the counts, we can also get the proportions of each category using the `normalize=True` argument.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndf.groupby(['resting_ecg'])['heart_disease'].value_counts(normalize=True).round(3)\n```\n\n::: {#heart-disease-by-resting-ecg-freq .cell-output .cell-output-display execution_count=17}\n```\nresting_ecg  heart_disease\nLVH          1                0.564\n             0                0.436\nNormal       1                0.516\n             0                0.484\nST           1                0.657\n             0                0.343\nName: proportion, dtype: float64\n```\n:::\n:::\n\n\n## Data Visualisation\n\nWhile inspecting the data directly and using summary statistics to describe it is a good first step, data visualisation is a more effective way to explore the data. It allows us to quickly identify patterns and relationships in the data, and to identify any data quality issues that might not be immediately obvious without a visual representation of the data.\n\nWhen using data visualisation for exploratory purposes, the intent is generally to visualise the way data is distributed, both within and between variables. This can be done using a variety of different types of plots, including histograms, bar charts, box plots, scatter plots, and line plots. How variables are distributed can tell us a lot about the variable itself, and how variables are distributed relative to each other can tell us a lot about the potential relationship between the variables.\n\nIn this tutorial, we will use the `matplotlib` and `seaborn` packages to create a series of data visualisations to explore the data in more detail. The `seaborn` package is a high-level data visualisation library that is built on top of `matplotlib`. Although data visualisation in Python is not as straightforward as it is in R, `seaborn` makes it much easier to create good quality and informative plots.\n\n### Visualising Data Distributions\n\nThe first step in the exploratory process is to visualise the data distributions of key variables in the dataset. This allows us to get a sense of the typical values and central tendency of the variable, as well as identifying any outliers or other data quality issues.\n\n#### Continuous Distributions\n\nFor continuous variables, we can use histograms to visualise the distribution of the data. We can use the `histplot()` function to create a histogram of a continuous variable. The `binwidth` argument allows us to specify the width of the bins in the histogram.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# age distribution\nsns.histplot(data=df, x='age', binwidth=5)\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/age-dist-output-1.png){#age-dist width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# max hr distribution\nsns.histplot(data=df, x='max_hr', binwidth=10)\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/max-hr-dist-output-1.png){#max-hr-dist width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# cholesterol distribution\nsns.histplot(data=df, x='cholesterol', binwidth=25)\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/cholesterol-dist-output-1.png){#cholesterol-dist width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# cholesterol distribution\nsns.histplot(data=df.loc[df.cholesterol!=0], x='cholesterol', binwidth=25)\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/filter-zeroes-cholesterol-dist-output-1.png){#filter-zeroes-cholesterol-dist width=961 height=649 fig-align='center'}\n:::\n:::\n\n\nThe inflated zero values in the cholesterol distribution suggests that there may be an issue with data quality that needs addressing.\n\n#### Discrete Distributions\n\nWe can use bar plots to visualise the distribution of discrete variables. We can use the `countplot()` function to create a bar plot of a discrete variable.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# heart disease distribution\nsns.countplot(data=df, x='heart_disease')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/heart-disease-dist-output-1.png){#heart-disease-dist width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# sex distribution\nsns.countplot(data=df, x='sex')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/sex-dist-output-1.png){#sex-dist width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# angina distribution\nsns.countplot(data=df, x='angina')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/angina-dist-output-1.png){#angina-dist width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n### Comparing Distributions\n\nThere are a number of ways to compare the distributions of multiple variables. Bar plots can be used to visualise two discrete variables, while histograms and box plots are useful for comparing the distribution of a continuous variable across the groups of a discrete variable, and scatter plots are particularly useful for comparing the distribution of two continuous variables.\n\n#### Visualising Multiple Discrete Variables\n\nBar plots are an effective way to visualize the observed relationship (or association, at least) between a discrete explanatory variable and a discrete outcome (whether binary, ordinal, or categorical). We can use the `countplot()` function to create bar plots, and the `hue` argument to split the bars by a particular variable and display them in different colours.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# heart disease by sex\nsns.countplot(data=df, x='heart_disease', hue='sex')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/heart-disease-by-sex-output-1.png){#heart-disease-by-sex width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n# heart disease by resting ecg\nsns.countplot(data=df, x='heart_disease', hue='resting_ecg')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/heart-disease-by-resting-ecg-output-1.png){#heart-disease-by-resting-ecg width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n# angina\nsns.countplot(data=df, x='heart_disease', hue='angina')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/heart-disease-by-angina-output-1.png){#heart-disease-by-angina width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\n# fasting bs\nsns.countplot(data=df, x='heart_disease', hue='fasting_bs')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/heart-disease-by-fasting-bs-output-1.png){#heart-disease-by-fasting-bs width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n#### Visualising A Continuous Variable Across Discrete Groups\n\nHistograms and box plots are useful for comparing the distribution of a continuous variable across the groups of a discrete variable.\n\n##### Histogram Plots\n\nWe can use the `histplot()` function to create a histogram of a continuous variable. The `hue` argument allows us to split the histogram by a particular variable and display them in different colours, while the `multiple` argument allows us to specify how the histograms should be displayed. The `multiple` argument can be set to `stack` to stack the histograms on top of each other, or `dodge` to display the histograms side-by-side.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\n# age distribution by heart disease\nsns.histplot(data=df, x='age', hue='heart_disease', binwidth=5, multiple='dodge')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/age-by-heart-disease-output-1.png){#age-by-heart-disease width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\n# cholesterol\nsns.histplot(data=df, x='cholesterol', hue='heart_disease', binwidth=25, multiple='dodge')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/cholesterol-by-heart-disease-output-1.png){#cholesterol-by-heart-disease width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\n# filter zero values\nsns.histplot(\n    data=df.loc[df.cholesterol!=0],\n    x='cholesterol',\n    hue='heart_disease',\n    binwidth=25,\n    multiple='dodge')\n\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/filtered-zeroes-cholesterol-by-heart-disease-output-1.png){#filtered-zeroes-cholesterol-by-heart-disease width=953 height=649 fig-align='center'}\n:::\n:::\n\n\nThe fact that there is a significantly larger proportion of positive heart disease cases in the zero cholesterol values further demonstrates the need to address this data quality issue.\n\n##### Box Plots\n\nBox plots visualize the characteristics of a continuous distribution over discrete groups. We can use the `boxplot()` function to create box plots, and the `hue` argument to split the box plots by a particular variable and display them in different colours.\n\nHowever, while box plots can be very useful, they are not always the most effective way of visualising this information, as explained [here](https://www.cedricscherer.com/2021/06/06/visualizing-distributions-with-raincloud-plots-and-how-to-create-them-with-ggplot2/) by Cedric Scherer. This guide uses box plots for the sake of simplicity, but it is worth considering other options when visualising distributions.\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\n# age & heart disease\nsns.boxplot(data=df, x='heart_disease', y='age')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/age-by-heart-disease-box-output-1.png){#age-by-heart-disease-box width=953 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\n# age & heart disease, split by sex\n# fig, ax = plt.subplots(figsize=(10,6))\nsns.boxplot(data=df, x='heart_disease', y='age', hue='sex')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/age-box-split-by-sex-output-1.png){#age-box-split-by-sex width=953 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\n# max hr & heart disease\nsns.boxplot(data=df, x='heart_disease', y='max_hr')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/max-hr-by-heart-disease-box-output-1.png){#max-hr-by-heart-disease-box width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\n# max hr & heart disease, split by sex\n# fig, ax = plt.subplots(figsize=(10,6))\nsns.boxplot(data=df, x='heart_disease', y='max_hr', hue='sex')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/max-hr-box-split-by-sex-output-1.png){#max-hr-box-split-by-sex width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n#### Visualising Multiple Discrete Variables\n\nScatter plots are an effective way to visualize how two continuous variables vary together.\nWe can use the `scatterplot()` function to create scatter plots, and the `hue` argument to split the scatter plots by a particular variable and display them in different colours.\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\n# age & resting bp\nsns.scatterplot(data=df, x='age', y='resting_bp')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/age-resting-bp-scatter-output-1.png){#age-resting-bp-scatter width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n# age & resting bp\nsns.scatterplot(data=df.loc[df.resting_bp!=0], x='age', y='resting_bp')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/filtered-zeroes-resting-bp-scatter-output-1.png){#filtered-zeroes-resting-bp-scatter width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nsns.scatterplot(data=df.loc[df.cholesterol!=0], x='age', y='cholesterol')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/age-cholesterol-scatter-output-1.png){#age-cholesterol-scatter width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nsns.scatterplot(data=df, x='age', y='max_hr')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/age-max-hr-scatter-output-1.png){#age-max-hr-scatter width=961 height=649 fig-align='center'}\n:::\n:::\n\n\nThe scatter plot visualising age and resting blood pressure highlights another observation that needs to be removed due to data quality issues.\n\nIf there appears to be an association between the two continuous variables that you have plotted, as is the case with age and maximum heart rate in the above plot, you can also add a regression line to visualize the strength of that association. The `regplot()` function can be used to add a regression line to a scatter plot. The `ci` argument specifies whether or not to display the confidence interval of the regression line.\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\n# age & max hr\nsns.regplot(data=df, x='age', y='max_hr', ci=None)\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/max-hr-by-age-regression-plot-output-1.png){#max-hr-by-age-regression-plot width=961 height=649 fig-align='center'}\n:::\n:::\n\n\nYou can also include discrete variables by assigning the discrete groups different colours in the scatter plot, and if you add regression lines to these plots, separate regression lines will be fit to the discrete groups. This can be useful for visualising how the association between the two continuous variables varies across the discrete groups.\n\nThe `lmplot()` function can be used to create scatter plots with regression lines, and the `hue` argument can be used to split the scatter plots by a particular variable and display them in different colours.\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\n# age & resting bp, split by heart disease\nsns.scatterplot(data=df.loc[df.resting_bp!=0], x='age', y='resting_bp', hue='heart_disease')\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/resting-bp-heart-disease-scatter-output-1.png){#resting-bp-heart-disease-scatter width=961 height=649 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\n# age & cholesterol, split by heart disease (with regression line)\nsns.lmplot(\n    data=df.loc[df.cholesterol!=0],\n    x='age', y='cholesterol',\n    hue='heart_disease',\n    ci=None,\n    height = 7,\n    aspect=1.3)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/cholesterol-regression-plot-output-1.png){#cholesterol-regression-plot width=960 height=662 fig-align='center'}\n:::\n:::\n\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\n# age & max hr, split by heart disease (with regression line)\nsns.lmplot(\n    data=df,\n    x='age', y='max_hr',\n    hue='heart_disease',\n    ci=None,\n    height = 7,\n    aspect=1.3)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](eda_py_files/figure-html/max-hr-regression-plot-output-1.png){#max-hr-regression-plot width=960 height=662 fig-align='center'}\n:::\n:::\n\n\n## Next Steps\n\nThere are many more visualisation techniques that you can use to explore your data, and you can find a comprehensive list of them on the [seaborn API reference](https://seaborn.pydata.org/api.html) and [matplotlib API reference](https://matplotlib.org/stable/api/index.html) pages. There are also a number of other Python libraries that can be used to create visualisations, including [plotly](https://plotly.com/python/), [bokeh](https://docs.bokeh.org/en/latest/docs/user_guide.html), and [altair](https://altair-viz.github.io/).\n\nThe next step in the data science process is to build a model to either explain or predict the outcome variable, heart disease. The exploratory work done here can help inform decisions about the choice of the model, and the choice of the variables that will be used to build the model. It will also help clean up the data, particularly the zero values in the cholesterol and resting blood pressure variables, to ensure that the model is built on the best possible data.\n\n## Resources\n\nThere are a wealth of resources available to help you learn more about data visualisation, and while the resources for producing visualisations in R are more extensive, there are still a number of good resources for producing visualisations in Python.\n\n- Scientific Visualization: Python + Matplotlib [[PDF](https://hal.inria.fr/hal-03427242/document)|[GitHub](https://github.com/rougier/scientific-visualization-book)]\n- [Seaborn Tutorials](https://seaborn.pydata.org/tutorial.html)\n- [Matplotlib Cheatsheets](https://github.com/matplotlib/cheatsheets)\n\nWhile the following resources are R-based, they are still useful for learning about data visualisation principles:\n\n- [Data Visualization: A Practical Introduction](https://socviz.co/)\n- [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/)\n\n",
    "supporting": [
      "eda_py_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}