{
  "hash": "93eb3aab1774b64238aa3df99d233447",
  "result": {
    "markdown": "# Exploratory Data Analysis {#sec-eda}\n\n\n::: {.cell hash='eda_r_cache/html/setup_b3619bb89ef1cd569c516e0db5fb24ef'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Setup Code (Click to Expand)\"}\n# install.packages(\"remotes\")\n# remotes::install_github(\"NHS-South-Central-and-West/scwplot\")\n\n# import packages\nsuppressPackageStartupMessages({\n  library(dplyr)\n  library(ggplot2)\n  library(scwplot)\n})\n\n# set plot theme\ntheme_set(scwplot::theme_scw(base_size = 14))\n\n# import data\ndf <- readr::read_csv(here::here('data', 'heart_disease.csv'))\n\n# convert discrete variables to factor type\ndf <- df |>\n  mutate(\n    sex = as.factor(sex),\n    fasting_bs = as.factor(fasting_bs),\n    resting_ecg = as.factor(resting_ecg),\n    angina = as.factor(angina),\n    heart_disease = as.factor(heart_disease)\n  )\n```\n:::\n\n\nExploratory data analysis (EDA) is the process of inspecting, visualising, and summarising a dataset. It is the first step in any data science project, and the importance of EDA can often be overlooked. Without exploring the data, it is difficult to know how to construct a piece of analysis or a model, and it is difficult to know if the data is suitable for the task at hand. As a critical step in the data science workflow, it is important to spend time on EDA and to be thorough and methodical in the process. While EDA is often the most time-consuming step in an analysis, taking the time to explore the data can save time in the long run.\n\nEDA is an iterative process. In this tutorial, we will use the `dplyr` and `ggplot2` packages to explore a dataset containing information about heart disease. We will start by inspecting the data itself, to get a sense of the structure and the components of the dataset, and to identify any data quality issues (such as missing values). We will then compute summary statistics to get a better understanding of the distribution and central tendency of the variables that are relevant to the analysis. Finally, we will use data visualisations to explore specific variables in more detail, and to identify any interesting relationships between variables.\n\n## Inspecting the Data\n\nThe first step when doing EDA is to inspect the data itself and get an idea of the structure of the dataset, the variable types, and the typical values of each variable. This gives a better understanding of exactly what data is being used and informs decisions both about the next steps in the exploratory process and any modelling choices.\n\nWe can use the `head()` and `glimpse()` functions to get a sense of the structure of the data. The `head()` function returns the first five rows of the data, and `glimpse()` returns a summary of the data, including the number of rows, the number of columns, the column names, the data type of each column, and the first few rows of the data. In addition to these two methods, we can use the `distinct()` function to get a list of all unique values of a particular variable. This is useful for discrete variables, such as the outcome variable, which can take on a limited number of values. For continuous variables (or any variables with a large number of unique values) the output of `distinct()` (a tibble) can be difficult to read, so we can use the `unique()` function to get a list of all unique values, which will be returned as a vector.\n\n\n::: {.cell hash='eda_r_cache/html/explore_a2f9e6bbed468b0f7c6769915912bf7f'}\n\n```{.r .cell-code}\n# view first rows in the dataset\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 10\n    age sex   resting_bp cholesterol fasting_bs resting_ecg max_hr angina\n  <dbl> <fct>      <dbl>       <dbl> <fct>      <fct>        <dbl> <fct> \n1    40 M            140         289 0          Normal         172 N     \n2    49 F            160         180 0          Normal         156 N     \n3    37 M            130         283 0          ST              98 N     \n4    48 F            138         214 0          Normal         108 Y     \n5    54 M            150         195 0          Normal         122 N     \n6    39 M            120         339 0          Normal         170 N     \n# ℹ 2 more variables: heart_peak_reading <dbl>, heart_disease <fct>\n```\n:::\n\n```{.r .cell-code}\n# overview of the data\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 918\nColumns: 10\n$ age                <dbl> 40, 49, 37, 48, 54, 39, 45, 54, 37, 48, 37, 58, 39,…\n$ sex                <fct> M, F, M, F, M, M, F, M, M, F, F, M, M, M, F, F, M, …\n$ resting_bp         <dbl> 140, 160, 130, 138, 150, 120, 130, 110, 140, 120, 1…\n$ cholesterol        <dbl> 289, 180, 283, 214, 195, 339, 237, 208, 207, 284, 2…\n$ fasting_bs         <fct> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ resting_ecg        <fct> Normal, Normal, ST, Normal, Normal, Normal, Normal,…\n$ max_hr             <dbl> 172, 156, 98, 108, 122, 170, 170, 142, 130, 120, 14…\n$ angina             <fct> N, N, N, Y, N, N, N, N, Y, N, N, Y, N, Y, N, N, N, …\n$ heart_peak_reading <dbl> 0.0, 1.0, 0.0, 1.5, 0.0, 0.0, 0.0, 0.0, 1.5, 0.0, 0…\n$ heart_disease      <fct> 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, …\n```\n:::\n\n```{.r .cell-code}\n# unique values of the outcome variable\ndf |>\n  distinct(heart_disease)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 1\n  heart_disease\n  <fct>        \n1 0            \n2 1            \n```\n:::\n\n```{.r .cell-code}\n# unique values of a continuous explanatory variable\nunique(df$cholesterol)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 289 180 283 214 195 339 237 208 207 284 211 164 204 234 273 196 201 248\n [19] 267 223 184 288 215 209 260 468 188 518 167 224 172 186 254 306 250 177\n [37] 227 230 294 264 259 175 318 216 340 233 205 245 194 270 213 365 342 253\n [55] 277 202 297 225 246 412 265 182 218 268 163 529 100 206 238 139 263 291\n [73] 229 307 210 329 147  85 269 275 179 392 466 129 241 255 276 282 338 160\n [91] 156 272 240 393 161 228 292 388 166 247 331 341 243 279 198 249 168 603\n[109] 159 190 185 290 212 231 222 235 320 187 266 287 404 312 251 328 285 280\n[127] 192 193 308 219 257 132 226 217 303 298 256 117 295 173 315 281 309 200\n[145] 336 355 326 171 491 271 274 394 221 126 305 220 242 347 344 358 169 181\n[163]   0 236 203 153 316 311 252 458 384 258 349 142 197 113 261 310 232 110\n[181] 123 170 369 152 244 165 337 300 333 385 322 564 239 293 407 149 199 417\n[199] 178 319 354 330 302 313 141 327 304 286 360 262 325 299 409 174 183 321\n[217] 353 335 278 157 176 131\n```\n:::\n:::\n\n\n## Summary Statistics\n\nSummary statistics are a quick and easy way to get a sense of the distribution, central tendency, and dispersion of the variables in the dataset. We can use the `summary()` function to get a summary of the data, including the mean and median values, the 1st and 3rd quartiles, and the minimum and maximum values of each numeric column. It also returns the count values for each factor column, and the number of NA values for each column.\n\nWhile the base `summary()` function is pretty effective and works right out of the box, the package `skimr` can provide a more detailed summary of the data, using the `skim()` function. If you are looking for a single function to capture the entire process of inspecting the data and computing summary statistics, `skim()` is the function for the job, giving you a wealth of information about the dataset as a whole and each variable in the data.\n\nIf we want to examine a particular variable, the functions `mean()`, `median()`, `quantile()`, `min()`, and `max()` will return the same information as the `summary()` function. We can also get a sense of dispersion by computing the standard deviation or variance of a variable. The `sd()` function returns the standard deviation of a variable, and the `var()` function returns the variance.\n\nFinally, we can use the `count()` function to get a count of the number of observations in each category of a discrete variable. Proportions can also be computed by dividing the count by the total number of observations. Using the `group_by()` function to group the data by a particular variable, and the `mutate()` function to add a new column to the data, we can compute the proportion as `n/sum(n)`.\n\n\n::: {.cell hash='eda_r_cache/html/summary-stats_9e923e5c68e35e19c6fb150e51b26fa7'}\n\n```{.r .cell-code}\n# summary of the data\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      age        sex       resting_bp     cholesterol    fasting_bs\n Min.   :28.00   F:193   Min.   :  0.0   Min.   :  0.0   0:704     \n 1st Qu.:47.00   M:725   1st Qu.:120.0   1st Qu.:173.2   1:214     \n Median :54.00           Median :130.0   Median :223.0             \n Mean   :53.51           Mean   :132.4   Mean   :198.8             \n 3rd Qu.:60.00           3rd Qu.:140.0   3rd Qu.:267.0             \n Max.   :77.00           Max.   :200.0   Max.   :603.0             \n resting_ecg      max_hr      angina  heart_peak_reading heart_disease\n LVH   :188   Min.   : 60.0   N:547   Min.   :-2.6000    0:410        \n Normal:552   1st Qu.:120.0   Y:371   1st Qu.: 0.0000    1:508        \n ST    :178   Median :138.0           Median : 0.6000                 \n              Mean   :136.8           Mean   : 0.8874                 \n              3rd Qu.:156.0           3rd Qu.: 1.5000                 \n              Max.   :202.0           Max.   : 6.2000                 \n```\n:::\n\n```{.r .cell-code}\n# more detailed summary of the data\nskimr::skim(df)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |     |\n|:------------------------|:----|\n|Name                     |df   |\n|Number of rows           |918  |\n|Number of columns        |10   |\n|_______________________  |     |\n|Column type frequency:   |     |\n|factor                   |5    |\n|numeric                  |5    |\n|________________________ |     |\n|Group variables          |None |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts                  |\n|:-------------|---------:|-------------:|:-------|--------:|:---------------------------|\n|sex           |         0|             1|FALSE   |        2|M: 725, F: 193              |\n|fasting_bs    |         0|             1|FALSE   |        2|0: 704, 1: 214              |\n|resting_ecg   |         0|             1|FALSE   |        3|Nor: 552, LVH: 188, ST: 178 |\n|angina        |         0|             1|FALSE   |        2|N: 547, Y: 371              |\n|heart_disease |         0|             1|FALSE   |        2|1: 508, 0: 410              |\n\n\n**Variable type: numeric**\n\n|skim_variable      | n_missing| complete_rate|   mean|     sd|   p0|    p25|   p50|   p75|  p100|hist  |\n|:------------------|---------:|-------------:|------:|------:|----:|------:|-----:|-----:|-----:|:-----|\n|age                |         0|             1|  53.51|   9.43| 28.0|  47.00|  54.0|  60.0|  77.0|▁▅▇▆▁ |\n|resting_bp         |         0|             1| 132.40|  18.51|  0.0| 120.00| 130.0| 140.0| 200.0|▁▁▃▇▁ |\n|cholesterol        |         0|             1| 198.80| 109.38|  0.0| 173.25| 223.0| 267.0| 603.0|▃▇▇▁▁ |\n|max_hr             |         0|             1| 136.81|  25.46| 60.0| 120.00| 138.0| 156.0| 202.0|▁▃▇▆▂ |\n|heart_peak_reading |         0|             1|   0.89|   1.07| -2.6|   0.00|   0.6|   1.5|   6.2|▁▇▆▁▁ |\n:::\n\n```{.r .cell-code}\n# mean age\nmean(df$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 53.51089\n```\n:::\n\n```{.r .cell-code}\n# median age\nmedian(df$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 54\n```\n:::\n\n```{.r .cell-code}\n# min and max age\nmin(df$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 28\n```\n:::\n\n```{.r .cell-code}\nmax(df$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 77\n```\n:::\n\n```{.r .cell-code}\n# dispersion of age\nsd(df$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.432617\n```\n:::\n\n```{.r .cell-code}\nvar(df$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 88.97425\n```\n:::\n\n```{.r .cell-code}\n# heart disease count\ndf |>\n  count(heart_disease)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  heart_disease     n\n  <fct>         <int>\n1 0               410\n2 1               508\n```\n:::\n\n```{.r .cell-code}\n# resting ecg count\ndf |>\n  count(resting_ecg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  resting_ecg     n\n  <fct>       <int>\n1 LVH           188\n2 Normal        552\n3 ST            178\n```\n:::\n\n```{.r .cell-code}\n# angina\ndf |>\n  count(angina)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  angina     n\n  <fct>  <int>\n1 N        547\n2 Y        371\n```\n:::\n\n```{.r .cell-code}\n# cholesterol\ndf |>\n  count(cholesterol)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 222 × 2\n   cholesterol     n\n         <dbl> <int>\n 1           0   172\n 2          85     1\n 3         100     2\n 4         110     1\n 5         113     1\n 6         117     1\n 7         123     1\n 8         126     2\n 9         129     1\n10         131     1\n# ℹ 212 more rows\n```\n:::\n\n```{.r .cell-code}\n# heart disease proportion\ndf |> \n  group_by(resting_ecg) |> \n  count(heart_disease) |> \n  mutate(freq = n/sum(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n# Groups:   resting_ecg [3]\n  resting_ecg heart_disease     n  freq\n  <fct>       <fct>         <int> <dbl>\n1 LVH         0                82 0.436\n2 LVH         1               106 0.564\n3 Normal      0               267 0.484\n4 Normal      1               285 0.516\n5 ST          0                61 0.343\n6 ST          1               117 0.657\n```\n:::\n:::\n\n\n## Data Visualisation\n\nWhile inspecting the data directly and using summary statistics to describe it is a good first step, data visualisation is a more effective way to explore the data. It allows us to quickly identify patterns and relationships in the data, and to identify any data quality issues that might not be immediately obvious without a visual representation of the data.\n\nWhen using data visualisation for exploratory purposes, the intent is generally to visualise the way data is distributed, both within and between variables. This can be done using a variety of different types of plots, including histograms, bar charts, box plots, scatter plots, and line plots. How variables are distributed can tell us a lot about the variable itself, and how variables are distributed relative to each other can tell us a lot about the potential relationship between the variables.\n\nIn this tutorial, we will use the `ggplot2` package to create a series of data visualisations to explore the data in more detail. `ggplot2` is an incredibly flexible and powerful package for creating data visualisations. While it can be a little difficult to make sense of the syntax at first, it is well worth the effort to learn how to use it. Learning how to use `ggplot2` is beyond the scope of this tutorial, but there are a number of excellent resources available online, including the [ggplot2 documentation](https://ggplot2.tidyverse.org/) and this [ggplot2 cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf).\n\n### Visualising Data Distributions\n\nThe first step in the exploratory process is to visualise the data distributions of key variables in the dataset. This allows us to get a sense of the typical values and central tendency of the variable, as well as identifying any outliers or other data quality issues.\n\n#### Continuous Distributions\n\nFor continuous variables, we can use histograms to visualise the distribution of the data. We can use the `geom_histogram()` function to create a histogram of a continuous variable. The `binwidth` argument can be used to control the width of the bins in the histogram.\n\n\n::: {.cell hash='eda_r_cache/html/continuous-dists_c19fc55a1129e0fb18270f9eaedcc953'}\n\n```{.r .cell-code}\n# age distribution\ndf |>\n  ggplot(aes(age)) +\n  geom_histogram(binwidth = 5)\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/continuous-dists-1.png){width=1152}\n:::\n\n```{.r .cell-code}\n# max hr distribution\ndf |>\n  ggplot(aes(max_hr)) +\n  geom_histogram(binwidth = 10)\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/continuous-dists-2.png){width=1152}\n:::\n\n```{.r .cell-code}\n# cholesterol distribution\ndf |>\n  ggplot(aes(cholesterol)) +\n  geom_histogram(binwidth = 25)\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/continuous-dists-3.png){width=1152}\n:::\n\n```{.r .cell-code}\n# filter zero values\ndf |> \n  filter(cholesterol != 0) |> \n  ggplot(aes(cholesterol)) +\n  geom_histogram(binwidth = 25)\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/continuous-dists-4.png){width=1152}\n:::\n:::\n\n\nThe inflated zero values in the cholesterol distribution suggests that there may be an issue with data quality that needs addressing.\n\n#### Discrete Distributions\n\nWe can use bar plots to visualise the distribution of discrete variables. We can use the `geom_bar()` function to create a bar plot of a discrete variable.\n\n\n::: {.cell hash='eda_r_cache/html/discrete-dists_112959267e7dd9e24456a43fc2f8b415'}\n\n```{.r .cell-code}\n# heart disease distribution\ndf |>\n  ggplot(aes(heart_disease)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/discrete-dists-1.png){width=1152}\n:::\n\n```{.r .cell-code}\n# sex distribution\ndf |>\n  ggplot(aes(sex)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/discrete-dists-2.png){width=1152}\n:::\n\n```{.r .cell-code}\n# angina distribution\ndf |>\n  ggplot(aes(angina)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/discrete-dists-3.png){width=1152}\n:::\n:::\n\n\n### Comparing Distributions\n\nThere are a number of ways to compare the distributions of multiple variables. Bar plots can be used to visualise two discrete variables, while histograms and box plots are useful for comparing the distribution of a continuous variable across the groups of a discrete variable, and scatter plots are particularly useful for comparing the distribution of two continuous variables.\n\n#### Visualising Multiple Discrete Variables\n\nBar plots are an effective way to visualize the observed relationship (or association, at least) between a discrete explanatory variable and a discrete outcome (whether binary, ordinal, or categorical).\n\nWe can use the `geom_bar()` function to create bar plots, but the default behaviour is to display the bars as stacked bars, which is not necessarily ideal for visualising discrete variables (though I'd recommend playing around with this yourself to decide what works in each case)\n\nThe `position` argument controls how the bars are displayed. The default `position = 'stack'` argument will display the bars as stacked bars, while the `position = 'dodge'` argument will display the bars side-by-side, and the `position = 'fill'` argument will display the bars as a proportion of the total number of observations in each category.\n\nFinally, the `fill` argument splits the bars by a particular variable and display them in different colours.\n\n\n::: {.cell hash='eda_r_cache/html/bar-plots_eb34a938004a862ffa34585dc08411fb'}\n\n```{.r .cell-code}\n# heart disease by sex\ndf |>\n  ggplot(aes(heart_disease, fill = sex)) +\n  geom_bar(position = 'dodge') +\n  scale_fill_qualitative(palette = \"scw\")\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/bar-plots-1.png){width=1152}\n:::\n\n```{.r .cell-code}\n# resting ecg\ndf |>\n  ggplot(aes(heart_disease, fill = resting_ecg)) +\n  geom_bar(position = 'dodge') +\n  scale_fill_qualitative(palette = \"scw\")\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/bar-plots-2.png){width=1152}\n:::\n\n```{.r .cell-code}\n# angina\ndf |>\n  ggplot(aes(heart_disease, fill = angina)) +\n  geom_bar(position = 'dodge') +\n  scale_fill_qualitative(palette = \"scw\")\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/bar-plots-3.png){width=1152}\n:::\n\n```{.r .cell-code}\n# fasting bs\ndf |>\n  ggplot(aes(heart_disease, fill = fasting_bs)) +\n  geom_bar(position = 'dodge') +\n  scale_fill_qualitative(palette = \"scw\")\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/bar-plots-4.png){width=1152}\n:::\n:::\n\n\n#### Visualising A Continuous Variable Across Discrete Groups\n\nHistograms and box plots are useful for comparing the distribution of a continuous variable across the groups of a discrete variable.\n\n##### Histogram Plots\n\nWe can use the `geom_histogram()` function to create histograms. The `fill` and `position` arguments can be used to split the bars by a particular variable and display them in different colours, as discussed above.\n\n\n::: {.cell hash='eda_r_cache/html/hist-comps_efc4bc6bcc9f5e9f505e8ae9d54b9db0'}\n\n```{.r .cell-code}\n# age distribution by heart disease\ndf |>\n  ggplot(aes(age, fill = heart_disease)) +\n  geom_histogram(binwidth = 5, position = 'dodge') +\n  scale_fill_qualitative(palette = \"scw\")\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/hist-comps-1.png){width=1152}\n:::\n\n```{.r .cell-code}\n# cholesterol\ndf |>\n  ggplot(aes(cholesterol, fill = heart_disease)) +\n  geom_histogram(binwidth = 25, position = 'dodge') +\n  scale_fill_qualitative(palette = \"scw\")\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/hist-comps-2.png){width=1152}\n:::\n\n```{.r .cell-code}\n# filter zero values\ndf |> \n  filter(cholesterol != 0) |> \n  ggplot(aes(cholesterol, fill = heart_disease)) +\n  geom_histogram(binwidth = 25, position = 'dodge') +\n  scale_fill_qualitative(palette = \"scw\")\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/hist-comps-3.png){width=1152}\n:::\n:::\n\n\nThe fact that there is a significantly larger proportion of positive heart disease cases in the zero cholesterol values further demonstrates the need to address this data quality issue.\n\n##### Box Plots\n\nBox plots visualize the characteristics of a continuous distribution over discrete groups. We can use the `geom_boxplot()` function to create box plots, and the `fill()` argument to split the box plots by a particular variable and display them in different colours.\n\nHowever, while box plots can be very useful, they are not always the most effective way of visualising this information, as explained [here](https://www.cedricscherer.com/2021/06/06/visualizing-distributions-with-raincloud-plots-and-how-to-create-them-with-ggplot2/) by Cedric Scherer. This guide uses box plots for the sake of simplicity, but it is worth considering other options when visualising distributions.\n\n\n::: {.cell hash='eda_r_cache/html/box-plots_a18d16c780ef4bb17bf68ba72df70771'}\n\n```{.r .cell-code}\n# age & heart disease\ndf |>\n  ggplot(aes(age, heart_disease, fill = heart_disease)) +\n  geom_boxplot(size=0.8) +\n  scale_fill_qualitative(palette = \"scw\")\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/box-plots-1.png){width=1152}\n:::\n\n```{.r .cell-code}\n# age & heart disease, split by sex\ndf |>\n  ggplot(aes(age, heart_disease, fill = sex)) +\n  geom_boxplot(size=0.8) +\n  scale_fill_qualitative(palette = \"scw\")\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/box-plots-2.png){width=1152}\n:::\n\n```{.r .cell-code}\n# max hr & heart disease\ndf |>\n  ggplot(aes(max_hr, heart_disease, fill = heart_disease)) +\n  geom_boxplot(size=0.8) +\n  scale_fill_qualitative(palette = \"scw\")\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/box-plots-3.png){width=1152}\n:::\n\n```{.r .cell-code}\n# max hr & heart disease, split by sex\ndf |>\n  ggplot(aes(max_hr, heart_disease, fill = sex)) +\n  geom_boxplot(size=0.8) +\n  scale_fill_qualitative(palette = \"scw\")\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/box-plots-4.png){width=1152}\n:::\n:::\n\n\n#### Visualising Multiple Discrete Variables\n\nScatter plots are an effective way to visualize how two continuous variables vary together. We can use the `geom_point()` function to create scatter plots, and the `colour` argument to split the scatter plots by a particular variable and display them in different colours.\n\n\n::: {.cell hash='eda_r_cache/html/scatter-plots_7b55f8922a8189fe45d7f64c5daa47cd'}\n\n```{.r .cell-code}\n# age & resting bp\ndf |> \n  ggplot(aes(age, resting_bp)) +\n  geom_point(alpha = 0.8, size = 3, colour = 'gray30')\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/scatter-plots-1.png){width=1152}\n:::\n\n```{.r .cell-code}\n# filter zero values\ndf |>\n  filter(resting_bp != 0) |> \n  ggplot(aes(age, resting_bp)) +\n  geom_point(alpha = 0.8, size = 3, colour = 'gray30')\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/scatter-plots-2.png){width=1152}\n:::\n\n```{.r .cell-code}\n# age & cholesterol\ndf |>\n  filter(cholesterol != 0) |> \n  ggplot(aes(age, cholesterol)) +\n  geom_point(alpha = 0.8, size = 3, colour = 'gray30')\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/scatter-plots-3.png){width=1152}\n:::\n\n```{.r .cell-code}\n# age & max hr\ndf |>\n  ggplot(aes(age, max_hr)) +\n  geom_point(alpha = 0.8, size = 3, colour = 'gray30')\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/scatter-plots-4.png){width=1152}\n:::\n:::\n\n\nThe scatter plot visualising age and resting blood pressure highlights another observation that needs to be removed due to data quality issues.\n\nIf there appears to be an association between the two continuous variables that you have plotted, as is the case with age and maximum heart rate in the above plot, you can also add a regression line to visualize the strength of that association. The `geom_smooth()` function can be used to add a regression line to a scatter plot. The `method` argument specifies the type of regression line to be added, and the `se` argument specifies whether or not to display the standard error of the regression line.\n\n\n::: {.cell hash='eda_r_cache/html/adding-regression-line_295ffcae0d537b425ebae779658ef363'}\n\n```{.r .cell-code}\n# age & max hr\ndf |>\n  ggplot(aes(age, max_hr)) +\n  geom_point(alpha = 0.8, size = 3, colour = 'gray30') +\n  geom_smooth(method = lm, se = FALSE, size = 2, colour='#005EB8')\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/adding-regression-line-1.png){width=1152}\n:::\n:::\n\n\nYou can also include discrete variables by assigning the discrete groups different colours in the scatter plot, and if you add regression lines to these plots, separate regression lines will be fit to the discrete groups. This can be useful for visualising how the association between the two continuous variables varies across the discrete groups.\n\n\n::: {.cell hash='eda_r_cache/html/adding-discrete-vars_15074e450eacd2ca67a929de939e9bae'}\n\n```{.r .cell-code}\n# age & resting bp, split by heart disease\ndf |>\n  filter(resting_bp != 0) |> \n  ggplot(aes(age, resting_bp, colour = heart_disease)) +\n  geom_point(alpha = 0.8, size = 3) +\n  scale_colour_qualitative(palette = \"scw\")\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/adding-discrete-vars-1.png){width=1152}\n:::\n\n```{.r .cell-code}\n# age & cholesterol, split by heart disease (with regression line)\ndf |>\n  filter(cholesterol!=0) |> \n  ggplot(aes(age, cholesterol, colour = heart_disease)) +\n  geom_point(size = 3, alpha = 0.8) +\n  geom_smooth(method = lm, se = FALSE, size = 1.5) +\n  scale_colour_qualitative(palette = \"scw\")\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/adding-discrete-vars-2.png){width=1152}\n:::\n\n```{.r .cell-code}\n# age & max hr, split by heart disease (with regression line)\ndf |>\n  ggplot(aes(age, max_hr, colour = heart_disease)) +\n  geom_point(size = 3, alpha = 0.8)+\n  geom_smooth(method = lm, se = FALSE, size = 1.5) +\n  scale_colour_qualitative(palette = \"scw\")\n```\n\n::: {.cell-output-display}\n![](eda_r_files/figure-html/adding-discrete-vars-3.png){width=1152}\n:::\n:::\n\n\n## Next Steps\n\nThere are many more visualisation techniques that you can use to explore your data, and you can find a comprehensive list of them on the [ggplot2 function reference](https://ggplot2.tidyverse.org/reference/index.html#geoms) page. There are also a wide variety of [ggplot extension packages](https://exts.ggplot2.tidyverse.org/gallery/) that can be used to create more complex visualisations.\n\nThe next step in the data science process is to build a model to either explain or predict the outcome variable, heart disease. The exploratory work done here can help inform decisions about the choice of the model, and the choice of the variables that will be used to build the model. It will also help clean up the data, particularly the zero values in the cholesterol and resting blood pressure variables, to ensure that the model is built on the best possible data.\n\n## Resources\n\nThere are a wealth of resources available to help you learn more about data visualisation.\n\n-   [Data Visualization: A Practical Introduction](https://socviz.co/)\n-   [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/)\n-   [Data Visualization with R](https://rkabacoff.github.io/datavis/)\n-   [{ggeasy} - Easy Access to {ggplot2} Commands](https://jonocarroll.github.io/ggeasy/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}