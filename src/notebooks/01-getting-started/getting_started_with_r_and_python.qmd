---
title: "Getting Started with R & Python"
subtitle: "Tips for Navigating Your First Steps with R & Python, From Installation to Programming Environments"
author: "Paul Johnson"
date: "`r Sys.Date()`"
---

Learning any programming language is challenging, and it's reasonable to be intimidated by the steep learning curve that you face when first delving into the process of learning how to code. However, there are a wealth of resources that can help you in that process, and it doesn't take long to get from your first lines of code to some interesting outputs!

This guide won't spend a ton of time trying to teach the basics of using R or Python or programming in general. Instead, this guide will focus on overcoming the initial barriers to getting from deciding to use R/Python to running your first lines of code.

If you are looking to learn R or Python, the following resources are a good place to start:

- [Learning Python](https://developers.google.com/edu/python)
- [The Python Tutorial](https://docs.python.org/3/tutorial)
- [QuantEcon Data Science: Python Fundamentals](https://datascience.quantecon.org/python_fundamentals/index.html)
- The NHS-R Community's [Introduction to R](https://nhs-r-community.github.io/intro_r/) and [Introduction to RStudio](https://github.com/nhs-r-community/intro-r-rstudio)

## Installation

Getting R or Python installed on your local machine requires submitting a request with the IT Self-Service Portal. The IT team may not have previous experience dealing with either language, so it can help the process if you are familiar with what you need.

In the case of R, everything you need can be found on the [Posit website](https://posit.co/download/rstudio-desktop/). You can download both R and RStudio (software for working with R more efficiently).

If you share this link with IT, installation should be relatively simple. However, in order to maximise performance, it is better to install both R and RStudio on your C drive.

The process for installing Python is a little more involved, though should still be relatively simple if you are following these steps. First, you can download the latest version of Python from the [Python website](https://www.python.org/downloads/).

When IT install Python from this link, there are several "Optional Features" available. Any features that are checked as default should be installed, but you should also make sure that 'pip' is one of the features that is checked.

Next, there are several "Advanced Options" that are available to select in the installation process. Again, the defaults should remain checked, but in addition to these, the "Add Python to environment variables" option needs to be checked. This should mean that Python is setup properly on your local machine.

## Programming Environments

### Integrated Development Environments (IDEs)

Integrated Development Environments (IDEs) are tools that can be used to write, run, and debug code. They are a great way to get started with a new language, because they can help you to avoid some of the more common mistakes that you might make when you are first learning how to code.

#### R

Getting from an R installation to running your first lines of code is a little easier than doing the same with Python. The biggest reason for this is the monopoly that Posit (formerly RStudio) has over the tools for using R.

RStudio is the best available Integrated Development Environment (IDE) for writing R code, and it is highly recommended that you stick to using RStudio when you first start using R. There are other IDEs and text editors that can handle R (for example, VS Code), but when you start out, it is easiest to stick to RStudio.

#### Python

Unlike R, there are a multitude of different IDEs that you can use for Python. While this is a good thing (lots of options) it can be a little intimidating for someone first dipping their toes into the Pythonic waters.

The most popular IDEs for Python are [Jupyter Notebook](https://jupyter.org/), [Visual Studio Code](https://code.visualstudio.com/), and [PyCharm](https://www.jetbrains.com/pycharm/). There are a myriad of other options, such as DataSpell, Spyder, Atom, and Sublime Text (which is technically a text editor, which is a [slightly different thing]((https://www.freecodecamp.org/news/what-is-the-difference-between-an-ide-and-a-text-editor/))), but the above choices are popular and relatively easy to get started with. There is no right answer here, so the best bet is just to try some out and see what feels good for you. Jupyter is generally a good choice to start you off, because it is a little easier to set up and start writing code immediately.

In addition to dedicated software, there are also a number of web-based IDEs that can be used for Python (and R). The most popular of these is [Google Colab](https://colab.research.google.com/), which is a free service that can be used to run Python code in the cloud.

Finally, another option, which will be particularly enticing for anyone that is already familiar with R, is RStudio. If you are already using R and are comfortable/familiar with RStudio, it might be easiest to start by trying Python out using the environment you're familiar with.

### Package Management

#### R

R has a built-in package management function, `install.packages()`, which can be used to install packages from CRAN. If you need to install a package from other sources, you can use the `devtools` package. For example, you can install packages from Github using the `devtools::install_github()` function.

#### Python

Python has a built-in package manager called `pip`, which can be used to install packages from PyPI, using the `pip install` command in the terminal. If you need to install a package from other sources, you can use the `pip install` command with the URL of the package.

### Virtual Environments

Virtual environments are a way of creating isolated environments for your code. This means that you can have different versions of the same package installed in different virtual environments, and you can switch between them as needed. This is particularly useful when you are working on multiple projects that require different versions of the same package. It also means that you can have different versions of the same package installed on your local machine without having to worry about breaking your code.

While it is possible to install packages in both R and Python without using virtual environments (and may be easier in the short term), it is recommended to use a virtual environment when building data science projects. This is because it helps to avoid problems that can occur when you have multiple versions of the same package installed on your local machine, and it also helps to ensure that your code will run on other people's machines.

#### R

The best way to create virtual environments in R is to use the [`renv`](https://rstudio.github.io/renv/) package. Virtual environments can be set up for R by running `renv::init()` in the console. This will create a new folder called `renv` in your project directory, and will create a new virtual environment for your project. You can then install packages in this virtual environment using the `install.packages()` function, or by using the `renv::install()` function.

#### Python

Python has a built-in way of creating virtual environments called `venv`. It can be used to create a new virtual environment by running `python -m venv <name of virtual environment>` in the terminal. This will create a new folder in your project directory called `.venv`, which will contain all of the packages that you install in that virtual environment.

There are also several third-party tools that can be used to create virtual environments in Python. The most popular of these is [conda](https://docs.conda.io/en/latest/), which is a package manager that can be used to create virtual environments. However, conda is not free to use for commercial purposes, so it is not recommended for use in the NHS. Free alternatives to venv include [virtualenv](https://virtualenv.pypa.io/en/latest/), [pipenv](https://pipenv.pypa.io/en/latest/) and [poetry](https://python-poetry.org/). While these are all good options (I personally like pipenv), they are not as well supported as venv, so it is recommended that you stick to venv when you first start using Python.
